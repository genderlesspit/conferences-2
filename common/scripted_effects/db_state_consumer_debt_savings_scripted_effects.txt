db_state_consumer_debt_savings_add_to_total = {
 #you must specify db_state_consumer_debt_savings_source as a temp variable
	if = {
		limit = { has_state_flag = db_state_consumer_debt_savings_overflow_check_is_negative }
		multiply_variable = { db_state_consumer_debt_savings_source = -1 } #forces digit to be positive
	}
	add_to_variable = { THIS.db_state_consumer_debt_savings_add_to_total = db_state_consumer_debt_savings_source }
}

db_state_consumer_debt_savings_initialize_overflow_value = {

    set_variable = { THIS.db_state_consumer_debt_savings_check_digit = 1 }

    for_loop_effect = {
		value = v
		add = 1
		start = 0
		end = 6
		
        if = {
            limit = { check_variable = { THIS.db_state_consumer_debt_savings_add_to_total > THIS.db_state_consumer_debt_savings_check_digit } }
            subtract_from_variable = { THIS.db_state_consumer_debt_savings_add_to_total = THIS.db_state_consumer_debt_savings_check_digit }
			add_to_variable = { THIS.db_state_consumer_debt_savings_overflow_check^v = 1 }
        }
		multiply_variable = { THIS.db_state_consumer_debt_savings_check_digit = 10 }
    }
	
    set_variable = { THIS.db_state_consumer_debt_savings_check_digit = -1 }

    for_loop_effect = {
		value = v
		add = 1
		start = 0
		end = 6
		
        if = {
            limit = { check_variable = { THIS.db_state_consumer_debt_savings_add_to_total < THIS.db_state_consumer_debt_savings_check_digit } }
            subtract_from_variable = { THIS.db_state_consumer_debt_savings_add_to_total = THIS.db_state_consumer_debt_savings_check_digit }
			add_to_variable = { THIS.db_state_consumer_debt_savings_overflow_check^v = -1 }
        }
		multiply_variable = { THIS.db_state_consumer_debt_savings_check_digit = 10 }
    }
}

db_calculate_consumer_debt_per_capita = {
	set_variable = { THIS.db_consumer_debt_per_capita_multiplier = 1 }
	set_variable = { THIS.db_consumer_debt_per_capita = 0 }
	for_loop_effect = {
		start = 3
		add = 1
		end = 9
		value = v
		set_temp_variable = { consumer_debt_per_capita_counter = THIS.db_state_consumer_debt_savings_overflow_check^v } 
		multiply_temp_variable = { consumer_debt_per_capita_counter = THIS.db_consumer_debt_per_capita_multiplier }
		add_to_variable = { THIS.db_consumer_debt_per_capita = consumer_debt_per_capita_counter }
		multiply_variable = { THIS.db_consumer_debt_per_capita_multiplier = 10 }
	}
	divide_variable = { THIS.db_consumer_debt_per_capita = THIS.state_population_k }
	multiply_variable = { THIS.db_consumer_debt_per_capita = 1000 }
	if = {
		limit = { has_state_flag = db_state_consumer_debt_savings_overflow_check_is_negative }
		multiply_variable = { THIS.db_consumer_debt_per_capita = -1 } #forces digit to be positive
	}
}

db_calculate_base_debt = {
	if = {
		limit = { check_variable = { THIS.db_state_debt_base > 0 } }
		set_variable = { THIS.db_state_base_debt_multiplier = 1 }
		for_loop_effect = {
			start = 3
			add = 1
			end = 9
			value = v
			
			if = {
				limit = { check_variable = { THIS.db_state_debt_base > THIS.db_state_base_debt_multiplier } }
				subtract_from_variable = { THIS.db_state_debt_base = THIS.db_state_base_debt_multiplier }
				add_to_variable = { THIS.db_state_consumer_debt_savings_overflow_check^v = 1 }
			}
			multiply_variable = { THIS.db_state_base_debt_multiplier = 10 }
		}
	}
	else = {
		clear_variable = THIS.db_state_debt_base
	}
}

db_startup_calculate_wages = {
	every_owned_state = {
		#limit = { is_controlled_by = PREV }
		
	# SET BASE WAGE 
		set_variable = { THIS.db_state_salary_total = PREV.db_national_minimum_wage }
		multiply_variable = { THIS.db_state_salary_total = PREV.db_national_work_hours_per_day }
		multiply_variable = { THIS.db_state_salary_total = THIS.db_state_base_cost_of_living_modifier }
		
	# MODIFY BASE WAGE BY UNEMPLOYMENT AND NATIONAL MODIFIERS
		set_variable = { THIS.db_state_salary_total_modifier = 0 }
		add_to_variable = { THIS.db_state_salary_total_modifier = THIS.db_state_base_wage_modifier }
		add_to_variable = { THIS.db_state_salary_total_modifier = THIS.db_state_total_unemployed_percent }
		divide_variable = {	THIS.db_state_salary_total_modifier = 2 }
		clamp_variable = { var = THIS.db_state_salary_total_modifier min = 0.1 max = 1 }
		multiply_variable = { THIS.db_state_salary_total = THIS.db_state_salary_total_modifier }
		clamp_variable = { 
			var = THIS.db_state_salary_total_modifier 
			min = var:PREV.db_national_minimum_wage 
			max = 9999999 
		}
		
	# CALCULATE DAILY WAGE PER CAPITA AND TOTAL DAILY INCOME
		set_variable = { THIS.db_state_daily_wage = THIS.db_state_salary_total }
		set_variable = { THIS.db_state_salary_average_per_capita = db_state_daily_wage }
		multiply_variable = { THIS.db_state_salary_average_per_capita = 365 }
		multiply_variable = { THIS.db_state_salary_total = db_state_total_employed }
		
	# CALCULATE TOTAL DAILY INCOME AND YEARLY SALARY
		set_variable = { THIS.db_state_daily_income_total = THIS.db_state_salary_total }
		set_variable = { THIS.db_state_taxes_raised = THIS.db_state_daily_income_total }
		multiply_variable = { THIS.db_state_taxes_raised = PREV.db_national_taxation_rate }
		subtract_from_variable = { THIS.db_state_daily_income_total = THIS.db_state_taxes_raised }
		set_variable = { THIS.db_state_daily_wage_total = THIS.db_state_salary_total }
		multiply_variable = { THIS.db_state_salary_total = 365 }
	}
}